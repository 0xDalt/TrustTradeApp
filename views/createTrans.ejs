<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <!-- <link rel="stylesheet" href="/stylesheets/darkmode.css" /> -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
  <link rel='stylesheet' href='/stylesheets/style.css' />
  <link rel='stylesheet' href='/stylesheets/darkmode.css' />
  <%- include ./partials/escrow-setup.ejs %>

</head>


<body>
  <!--NAVBAR-->
  <div class="page-container">
    <%- include partials/nav.ejs %>
    <%- include partials/header.ejs %>
  </div>
     
      <div class="wrapper">
        <form id="createTrans" action="/trans/create" method="POST">
          <input name="ethAddress" type="hidden" />
          <script type="text/javascript">
            /*

            https://docs.metamask.io/guide/ethereum-provider.html#methods
            https://docs.metamask.io/guide/rpc-api.html#ethereum-json-rpc-methods
            https://eth.wiki/json-rpc/API#eth_accounts

            */

            console.log("before accounts");

            (async ()=>{
              if (typeof window.ethereum === 'undefined') {
                return console.log('MetaMask is not installed!');
              }

              let accounts = await ethereum.request({ method: 'eth_accounts' });
              console.log("web3 accounts:", accounts);
              if(accounts.length === 0){
                return console.log("No accounts associated to this metamask")
              }
              var inputNode = document.querySelector("input[name=ethAddress]")
              inputNode.value = accounts[0];
            })()
          </script>
      

          <div class="container my-5">
            <h1>
              <%= title %>
            </h1>
            <p>create transaction </p>
          </div>
              <div class="form-check form-check-inline">
                <input class=" form-check-input" type="radio" name="buyerOrSeller" id="gridRadios1" value="buyer"
                  checked />
                <label class="form-check-label" for="gridRadios1">
                  buyer
                </label>
              </div>
              <div class="form-check form-check-inline"">
                  <input class=" form-check-input" type="radio" name="buyerOrSeller" id="gridRadios2" value="seller" />
                <label class="form-check-label" for="gridRadios2">
                  seller
                </label>
              </div>
                <div class="input-group mb-3">
                  <div class="input-group-prepend">
                    <span class="input-group-text">â‚¬</span>
                  </div>
                  <input type="text" name="value" class="form-control" aria-label="Amount (to the nearest dollar)" />
                </div>
                <div>
                  <span>Amount Escrowed:</span><span id="trueValue"></span>
                </div>
                <div id="valueError">

                </div>
            <div class="form-group">
                <label for="description">Description</label>
                <textarea name="description" id="description" class="form-control"></textarea>
              </div><br>
              <div>
                <button type="submit" class="btn btn-primary">create transaction</button>
              </div>
        </form>
        <script type="text/javascript" >
          var radios = document.querySelectorAll('input[type=radio][name="buyerOrSeller"]');

          Array.prototype.forEach.call(radios, function(radio) {
            radio.addEventListener('change', updateTrueValue);
          });
          var valueInput = document.querySelector("input[name=value]");
          var trueValue = document.querySelector("#trueValue")
          var valueError = document.querySelector("#valueError");

          function updateTrueValue(){
            trueValue.textContent = "";
            try {
              var val = valueInput.value;
              var int = parseInt(val);
              console.log("parsed:", int)
              if(isNaN(int)){
                throw "Value is not an integer"
              }
              var leftover = int%6;
              if(leftover > 0){
                console.log("bad div", leftover)
                throw "Value needs to be divisable by 6"
              }
              const buyerOrSeller = document.querySelector("input[name=buyerOrSeller]:checked").value;
              trueValue.textContent = int * (buyerOrSeller === "buyer" ? 3 : 2);
              console.log(buyerOrSeller)
            }catch(e){
              console.log("bad int")
              return;
            }
          }

          valueInput.addEventListener("keyup", ()=>{
            trueValue.textContent = "";
            var val = valueInput.value;
            console.log("changed:", val);
            try {
              var int = parseInt(val);
              console.log("parsed:", int)
              if(isNaN(int)){
                throw "Value is not an integer"
              }
              var leftover = int%6;
              if(leftover > 0){
                console.log("bad div", leftover)
                throw "Value needs to be divisable by 6"
              }
            }catch(e){
              console.log("bad int")
              valueError.textContent = e
              return;
            }

            valueError.textContent = "";
            updateTrueValue()
          })

          var form = document.querySelector("#createTrans");
          console.log("create trans:", form)
          form.addEventListener("submit", async (e)=>{
            e.preventDefault()
            console.log("submit")
            // e.preventDefault();
            //  need the address location of the smart contract
            // Every time the front end is rendered, add it in as a variable
            

            const buyerOrSeller = document.querySelector("input[name=buyerOrSeller]:checked").value;
            const description = document.querySelector("textarea[name=description]").value;
            const ethAddress = document.querySelector("input[name=ethAddress]").value;
            // const value = trueValue.textContent;
            const value = document.querySelector("input[name=value]").value;
            // const buyerOrSeller = "";
            // const description   = "";
            // const ethAddress    = "";
            // const value         = "";


            console.log(
              buyerOrSeller === "buyer",
              description,
              ethAddress,
              value
            )

            console.log("createEscrow:", window.App.contracts.EscrowContainerInstance.methods);

            var escrow = await window.App.contracts.EscrowContainerInstance.methods.createEscrow(
              buyerOrSeller === "buyer",
              description
            ).send(
              {
                from: ethAddress,
                value: value
              }
            );
            console.log(escrow);
            window.location = "/trans/users/" + ethAddress;

          })
        
        </script>
      </div>
     
</body>
<script src="/javascripts/meta.js"></script>

<script> //NavBar
  function openNav() {
    document.getElementById("mySidenav").style.width = "250px";
  }

  function closeNav() {
    document.getElementById("mySidenav").style.width = "0";
  }
</script>
<script> //dark-mode
  const toggleSwitch = document.querySelector('.theme-switch input[type="checkbox"]');
const currentTheme = localStorage.getItem('theme');

if (currentTheme) {
    document.documentElement.setAttribute('data-theme', currentTheme);
  
    if (currentTheme === 'dark') {
        toggleSwitch.checked = true;
    }
}

function switchTheme(e) {
    if (e.target.checked) {
        document.documentElement.setAttribute('data-theme', 'dark');
        localStorage.setItem('theme', 'dark');
    }
    else {        document.documentElement.setAttribute('data-theme', 'light');
          localStorage.setItem('theme', 'light');
    }    
}

toggleSwitch.addEventListener('change', switchTheme, false);
</script>

</html>